

// ifeq
{{#ifeq: 01 | 1 | equal | not equal}} → equal
{{#ifeq: 0 | -0 | equal | not equal}} → equal
{{#ifeq: 1e3 | 1000 | equal | not equal}} → equal
{{#ifeq: {{#expr:10^3}} | 1000 | equal | not equal}} → equal

Otherwise the comparison is made as text; this comparison is case sensitive:

{{#ifeq: foo | bar | equal | not equal}} → not equal
{{#ifeq: foo | Foo | equal | not equal}} → not equal
{{#ifeq: foo | foo | equal | not equal}} → equal
{{#ifeq: "01" | "1" | equal | not equal}} → not equal  (compare to similar example above, without the quotes)
{{#ifeq: 10^3 | 1000 | equal | not equal}} → not equal



// iferror
This function takes an input string and returns one of two results; the function evaluates to true if the input string contains an HTML object with class="error", as generated by other parser functions such as #expr, #time and #rel2abs, template errors such as loops and recursions, and other "failsoft" parser errors.

    {{#iferror: test string | value if error | value if correct }}

One or both of the return strings can be omitted. If the correct string is omitted, the test string is returned if it is not erroneous. If the error string is also omitted, an empty string is returned on an error:

    {{#iferror: {{#expr: 1 + 2 }} | error | correct }} → correct
    {{#iferror: {{#expr: 1 + X }} | error | correct }} → error
    {{#iferror: {{#expr: 1 + 2 }} | error }} → 3
    {{#iferror: {{#expr: 1 + X }} | error }} → error
    {{#iferror: {{#expr: 1 + 2 }} }} → 3
    {{#iferror: {{#expr: 1 + X }} }} → ‌
    {{#iferror: {{#expr: . }} | error | correct }} → correct
    {{#iferror: <strong class="error">a</strong> | error | correct }} → error


// ifexpr
    This function evaluates a mathematical expression and returns one of two strings depending on the boolean value of the result:

        {{#ifexpr: expression | value if true | value if false }}

    The expression input is evaluated exactly as for #expr above, with the same operators being available. The output is then evaluated as a boolean expression.

    An empty input expression evaluates to false:

        {{#ifexpr: | yes | no}} → no

    As mentioned above, zero evaluates to false and any nonzero value evaluates to true, so this function is equivalent to one using #ifeq and #expr only:

        {{#ifeq: {{#expr: expression }} | 0 | value if false | value if true }}

    except for an empty or wrong input expression (an error message is treated as an empty string; it is not equal to zero, so we get value if true).

        {{#ifexpr: = | yes | no }} → Expression error: Unexpected = operator.

    comparing

        {{#ifeq: {{#expr: = }} | 0 | no | yes }} → yes

    Either or both the return values may be omitted; no output is given when the appropriate branch is left empty:

        {{#ifexpr: 1 > 0 | yes }} → yes
        {{#ifexpr: 1 < 0 | yes }} →
        {{#ifexpr: 0 = 0 | yes }} → yes
        {{#ifexpr: 1 > 0 | | no}} →
        {{#ifexpr: 1 < 0 | | no}} → no
        {{#ifexpr: 1 > 0 }} →
